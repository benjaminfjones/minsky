// A simple grammar for Magnificent Minsky Machines.
//
// The number of tapes `n` is given, they are assumed to be numbered from
// 0..n-1.
//
// On each subsequent line, a rule is given. Each rule starts with a matching
// state (non-negative integer), a vector of increments/decrements to the tape
// heads which must have length `n`, and finally a next state.
//
// For example:
//
// ----
// tapes: 3
// 0 [1, -1, 1] 0
// 0 [0, 1, 0] 1
// ----
//
// describes a program which will decrement tape 1 repeatedly until it reaches
// the bottom, while incrementing tapes 0 and 2. Then it will increment tape 1
// and transition to state 1, and finally halt since no more rules apply.
//
use std::str::FromStr;
use crate::magnificent::{Program,Rule};

grammar;

// Specify terminal precedence and patterns to skip while lexing
match {
    "tapes:",
    "[",
    "]",
    ",",
    r"[+-]?[0-9]+",
    r"\s*" => { }, // Skip whitespace
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
}

pub Program: Program = {
    <nt:NTapes> <rs:Rule+> => Program::new(
        nt as usize,
        rs,
    )
};

NTapes: i32 = {
    "tapes:" <n:Num> => n,
};

Rule: Rule = {
    <n1:Num> "[" <v:Comma<Num>> "]" <n2:Num> => Rule::new(
        n1 as usize,
        n2 as usize,
        v,
    )
};

Num: i32 = {
    <s:r"[+-]?[0-9]+"> => i32::from_str(s)
        .expect("could not parse expected integer")
};

// Macros

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => v.into_iter().chain(e.into_iter()).collect()
};
